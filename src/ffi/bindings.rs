/* automatically generated by rust-bindgen 0.57.0 */

pub const SPX_CONFIG_TRACE_INCLUDE_DBG_WITH_ALL: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const AZAC_ERR_NONE: u32 = 0;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const AZAC_CONFIG_TRACE_INCLUDE_DBG_WITH_ALL: u32 = 1;
pub const __AZAC_TRACE_LEVEL_INFO: u32 = 8;
pub const __AZAC_TRACE_LEVEL_WARNING: u32 = 4;
pub const __AZAC_TRACE_LEVEL_ERROR: u32 = 2;
pub const __AZAC_TRACE_LEVEL_VERBOSE: u32 = 16;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const SPX_NOERROR: u32 = 0;
pub const __SPX_TRACE_LEVEL_INFO: u32 = 8;
pub const __SPX_TRACE_LEVEL_WARNING: u32 = 4;
pub const __SPX_TRACE_LEVEL_ERROR: u32 = 2;
pub const __SPX_TRACE_LEVEL_VERBOSE: u32 = 16;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " <summary>"]
#[doc = " Type definition for Azure AI Core result codes."]
#[doc = " </summary>"]
pub type AZACHR = usize;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _azac_empty {}
#[test]
fn bindgen_test_layout__azac_empty() {
    assert_eq!(
        ::std::mem::size_of::<_azac_empty>(),
        0usize,
        concat!("Size of: ", stringify!(_azac_empty))
    );
    assert_eq!(
        ::std::mem::align_of::<_azac_empty>(),
        1usize,
        concat!("Alignment of ", stringify!(_azac_empty))
    );
}
pub type _azachandle = *mut _azac_empty;
pub type AZAC_HANDLE = _azachandle;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn diagnostics_log_start_logging(
        hpropbag: AZAC_HANDLE,
        reserved: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_apply_properties(
        hpropbag: AZAC_HANDLE,
        reserved: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_stop_logging() -> AZACHR;
}
pub type DIAGNOSTICS_CALLBACK_FUNC =
    ::std::option::Option<unsafe extern "C" fn(logLine: *const ::std::os::raw::c_char)>;
extern "C" {
    pub fn diagnostics_logmessage_set_callback(callback: DIAGNOSTICS_CALLBACK_FUNC) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_logmessage_set_filters(filters: *const ::std::os::raw::c_char) -> AZACHR;
}
pub type DIAGNOSTICS_EVENTSOURCE_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(logLine: *const ::std::os::raw::c_char, level: ::std::os::raw::c_int),
>;
extern "C" {
    pub fn diagnostics_eventsource_logmessage_set_callback(
        callback: DIAGNOSTICS_EVENTSOURCE_CALLBACK_FUNC,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_eventsource_logmessage_set_filters(
        filters: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_memory_start_logging();
}
extern "C" {
    pub fn diagnostics_log_memory_stop_logging();
}
extern "C" {
    pub fn diagnostics_log_memory_set_filters(filters: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn diagnostics_log_memory_get_line_num_oldest() -> size_t;
}
extern "C" {
    pub fn diagnostics_log_memory_get_line_num_newest() -> size_t;
}
extern "C" {
    pub fn diagnostics_log_memory_get_line(lineNum: size_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn diagnostics_log_memory_dump_to_stderr() -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_memory_dump(
        filename: *const ::std::os::raw::c_char,
        linePrefix: *const ::std::os::raw::c_char,
        emitToStdOut: bool,
        emitToStdErr: bool,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_memory_dump_on_exit(
        filename: *const ::std::os::raw::c_char,
        linePrefix: *const ::std::os::raw::c_char,
        emitToStdOut: bool,
        emitToStdErr: bool,
    ) -> AZACHR;
}
extern "C" {
    pub fn diagnostics_log_console_start_logging(logToStderr: bool);
}
extern "C" {
    pub fn diagnostics_log_console_stop_logging();
}
extern "C" {
    pub fn diagnostics_log_console_set_filters(filters: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn diagnostics_log_format_message(
        buffer: *mut ::std::os::raw::c_char,
        bufferSize: size_t,
        level: ::std::os::raw::c_int,
        pszTitle: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
        pszFormat: *const ::std::os::raw::c_char,
        argptr: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn diagnostics_log_trace_string(
        level: ::std::os::raw::c_int,
        pszTitle: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
        psz: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn diagnostics_log_trace_message(
        level: ::std::os::raw::c_int,
        pszTitle: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
        pszFormat: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn diagnostics_log_trace_message2(
        level: ::std::os::raw::c_int,
        pszTitle: *const ::std::os::raw::c_char,
        fileName: *const ::std::os::raw::c_char,
        lineNumber: ::std::os::raw::c_int,
        pszFormat: *const ::std::os::raw::c_char,
        argptr: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn diagnostics_set_log_level(
        logger: *const ::std::os::raw::c_char,
        level: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn diagnostics_is_log_level_enabled(level: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn diagnostics_get_handle_count() -> size_t;
}
extern "C" {
    pub fn diagnostics_get_handle_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn diagnostics_free_string(value: *const ::std::os::raw::c_char) -> AZACHR;
}
pub type const_char_ptr = *const ::std::os::raw::c_char;
extern "C" {
    pub fn error_get_message(errorHandle: AZAC_HANDLE) -> const_char_ptr;
}
extern "C" {
    pub fn error_get_call_stack(errorHandle: AZAC_HANDLE) -> const_char_ptr;
}
extern "C" {
    pub fn error_get_error_code(errorHandle: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn error_release(errorHandle: AZAC_HANDLE) -> AZACHR;
}
pub type SPXASYNCHANDLE = AZAC_HANDLE;
pub type SPXFACTORYHANDLE = AZAC_HANDLE;
pub type SPXRECOHANDLE = AZAC_HANDLE;
pub type SPXSYNTHHANDLE = AZAC_HANDLE;
pub type SPXRESULTHANDLE = AZAC_HANDLE;
pub type SPXEVENTHANDLE = AZAC_HANDLE;
pub type SPXSESSIONHANDLE = AZAC_HANDLE;
pub type SPXTRIGGERHANDLE = AZAC_HANDLE;
pub type SPXLUMODELHANDLE = AZAC_HANDLE;
pub type SPXKEYWORDHANDLE = AZAC_HANDLE;
pub type SPXAUDIOSTREAMFORMATHANDLE = AZAC_HANDLE;
pub type SPXAUDIOSTREAMHANDLE = AZAC_HANDLE;
pub type SPXAUDIOCONFIGHANDLE = AZAC_HANDLE;
pub type SPXSPEECHCONFIGHANDLE = AZAC_HANDLE;
pub type SPXCONNECTIONHANDLE = AZAC_HANDLE;
pub type SPXCONNECTIONMESSAGEHANDLE = AZAC_HANDLE;
pub type SPXACTIVITYHANDLE = AZAC_HANDLE;
pub type SPXACTIVITYJSONHANDLE = AZAC_HANDLE;
pub type SPXGRAMMARHANDLE = AZAC_HANDLE;
pub type SPXPHRASEHANDLE = AZAC_HANDLE;
pub type SPXUSERHANDLE = AZAC_HANDLE;
pub type SPXPARTICIPANTHANDLE = AZAC_HANDLE;
pub type SPXAUTODETECTSOURCELANGCONFIGHANDLE = AZAC_HANDLE;
pub type SPXSOURCELANGCONFIGHANDLE = AZAC_HANDLE;
pub type SPXCONVERSATIONHANDLE = AZAC_HANDLE;
pub type SPXMEETINGHANDLE = AZAC_HANDLE;
pub type SPXCONVERSATIONTRANSLATORHANDLE = AZAC_HANDLE;
pub type SPXVOICEPROFILECLIENTHANDLE = AZAC_HANDLE;
pub type SPXVOICEPROFILEHANDLE = AZAC_HANDLE;
pub type SPXSPEAKERIDHANDLE = AZAC_HANDLE;
pub type SPXSIMODELHANDLE = AZAC_HANDLE;
pub type SPXSVMODELHANDLE = AZAC_HANDLE;
pub type SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE = AZAC_HANDLE;
pub type SPXAUDIOPROCESSINGOPTIONSHANDLE = AZAC_HANDLE;
pub type SPXSPEECHRECOMODELHANDLE = AZAC_HANDLE;
pub type SPXREQUESTHANDLE = AZAC_HANDLE;
extern "C" {
    pub fn property_bag_create(hpropbag: *mut AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn property_bag_is_valid(hpropbag: AZAC_HANDLE) -> bool;
}
extern "C" {
    pub fn property_bag_set_string(
        hpropbag: AZAC_HANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn property_bag_get_string(
        hpropbag: AZAC_HANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        defaultValue: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_bag_free_string(value: *const ::std::os::raw::c_char) -> AZACHR;
}
extern "C" {
    pub fn property_bag_release(hpropbag: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn property_bag_copy(hfrom: AZAC_HANDLE, hto: AZAC_HANDLE) -> AZACHR;
}
pub const PropertyId_SpeechServiceConnection_Key: PropertyId = 1000;
pub const PropertyId_SpeechServiceConnection_Endpoint: PropertyId = 1001;
pub const PropertyId_SpeechServiceConnection_Region: PropertyId = 1002;
pub const PropertyId_SpeechServiceAuthorization_Token: PropertyId = 1003;
pub const PropertyId_SpeechServiceAuthorization_Type: PropertyId = 1004;
pub const PropertyId_SpeechServiceConnection_EndpointId: PropertyId = 1005;
pub const PropertyId_SpeechServiceConnection_Host: PropertyId = 1006;
pub const PropertyId_SpeechServiceConnection_ProxyHostName: PropertyId = 1100;
pub const PropertyId_SpeechServiceConnection_ProxyPort: PropertyId = 1101;
pub const PropertyId_SpeechServiceConnection_ProxyUserName: PropertyId = 1102;
pub const PropertyId_SpeechServiceConnection_ProxyPassword: PropertyId = 1103;
pub const PropertyId_SpeechServiceConnection_Url: PropertyId = 1104;
pub const PropertyId_SpeechServiceConnection_TranslationToLanguages: PropertyId = 2000;
pub const PropertyId_SpeechServiceConnection_TranslationVoice: PropertyId = 2001;
pub const PropertyId_SpeechServiceConnection_TranslationFeatures: PropertyId = 2002;
pub const PropertyId_SpeechServiceConnection_IntentRegion: PropertyId = 2003;
pub const PropertyId_SpeechServiceConnection_RecoMode: PropertyId = 3000;
pub const PropertyId_SpeechServiceConnection_RecoLanguage: PropertyId = 3001;
pub const PropertyId_Speech_SessionId: PropertyId = 3002;
pub const PropertyId_SpeechServiceConnection_UserDefinedQueryParameters: PropertyId = 3003;
pub const PropertyId_SpeechServiceConnection_RecoModelBackend: PropertyId = 3004;
pub const PropertyId_SpeechServiceConnection_RecoModelName: PropertyId = 3005;
pub const PropertyId_SpeechServiceConnection_RecoModelKey: PropertyId = 3006;
pub const PropertyId_SpeechServiceConnection_RecoModelIniFile: PropertyId = 3007;
pub const PropertyId_SpeechServiceConnection_SynthLanguage: PropertyId = 3100;
pub const PropertyId_SpeechServiceConnection_SynthVoice: PropertyId = 3101;
pub const PropertyId_SpeechServiceConnection_SynthOutputFormat: PropertyId = 3102;
pub const PropertyId_SpeechServiceConnection_SynthEnableCompressedAudioTransmission: PropertyId =
    3103;
pub const PropertyId_SpeechServiceConnection_SynthBackend: PropertyId = 3110;
pub const PropertyId_SpeechServiceConnection_SynthOfflineDataPath: PropertyId = 3112;
pub const PropertyId_SpeechServiceConnection_SynthOfflineVoice: PropertyId = 3113;
pub const PropertyId_SpeechServiceConnection_SynthModelKey: PropertyId = 3114;
pub const PropertyId_SpeechServiceConnection_VoicesListEndpoint: PropertyId = 3130;
pub const PropertyId_SpeechServiceConnection_InitialSilenceTimeoutMs: PropertyId = 3200;
pub const PropertyId_SpeechServiceConnection_EndSilenceTimeoutMs: PropertyId = 3201;
pub const PropertyId_SpeechServiceConnection_EnableAudioLogging: PropertyId = 3202;
pub const PropertyId_SpeechServiceConnection_LanguageIdMode: PropertyId = 3205;
pub const PropertyId_SpeechServiceConnection_AutoDetectSourceLanguages: PropertyId = 3300;
pub const PropertyId_SpeechServiceConnection_AutoDetectSourceLanguageResult: PropertyId = 3301;
pub const PropertyId_SpeechServiceResponse_RequestDetailedResultTrueFalse: PropertyId = 4000;
pub const PropertyId_SpeechServiceResponse_RequestProfanityFilterTrueFalse: PropertyId = 4001;
pub const PropertyId_SpeechServiceResponse_ProfanityOption: PropertyId = 4002;
pub const PropertyId_SpeechServiceResponse_PostProcessingOption: PropertyId = 4003;
pub const PropertyId_SpeechServiceResponse_RequestWordLevelTimestamps: PropertyId = 4004;
pub const PropertyId_SpeechServiceResponse_StablePartialResultThreshold: PropertyId = 4005;
pub const PropertyId_SpeechServiceResponse_OutputFormatOption: PropertyId = 4006;
pub const PropertyId_SpeechServiceResponse_RequestSnr: PropertyId = 4007;
pub const PropertyId_SpeechServiceResponse_TranslationRequestStablePartialResult: PropertyId = 4100;
pub const PropertyId_SpeechServiceResponse_RequestWordBoundary: PropertyId = 4200;
pub const PropertyId_SpeechServiceResponse_RequestPunctuationBoundary: PropertyId = 4201;
pub const PropertyId_SpeechServiceResponse_RequestSentenceBoundary: PropertyId = 4202;
pub const PropertyId_SpeechServiceResponse_SynthesisEventsSyncToAudio: PropertyId = 4210;
pub const PropertyId_SpeechServiceResponse_JsonResult: PropertyId = 5000;
pub const PropertyId_SpeechServiceResponse_JsonErrorDetails: PropertyId = 5001;
pub const PropertyId_SpeechServiceResponse_RecognitionLatencyMs: PropertyId = 5002;
pub const PropertyId_SpeechServiceResponse_RecognitionBackend: PropertyId = 5003;
pub const PropertyId_SpeechServiceResponse_SynthesisFirstByteLatencyMs: PropertyId = 5010;
pub const PropertyId_SpeechServiceResponse_SynthesisFinishLatencyMs: PropertyId = 5011;
pub const PropertyId_SpeechServiceResponse_SynthesisUnderrunTimeMs: PropertyId = 5012;
pub const PropertyId_SpeechServiceResponse_SynthesisConnectionLatencyMs: PropertyId = 5013;
pub const PropertyId_SpeechServiceResponse_SynthesisNetworkLatencyMs: PropertyId = 5014;
pub const PropertyId_SpeechServiceResponse_SynthesisServiceLatencyMs: PropertyId = 5015;
pub const PropertyId_CancellationDetails_Reason: PropertyId = 6000;
pub const PropertyId_CancellationDetails_ReasonText: PropertyId = 6001;
pub const PropertyId_CancellationDetails_ReasonDetailedText: PropertyId = 6002;
pub const PropertyId_LanguageUnderstandingServiceResponse_JsonResult: PropertyId = 7000;
pub const PropertyId_AudioConfig_DeviceNameForCapture: PropertyId = 8000;
pub const PropertyId_AudioConfig_NumberOfChannelsForCapture: PropertyId = 8001;
pub const PropertyId_AudioConfig_SampleRateForCapture: PropertyId = 8002;
pub const PropertyId_AudioConfig_BitsPerSampleForCapture: PropertyId = 8003;
pub const PropertyId_AudioConfig_AudioSource: PropertyId = 8004;
pub const PropertyId_AudioConfig_DeviceNameForRender: PropertyId = 8005;
pub const PropertyId_AudioConfig_PlaybackBufferLengthInMs: PropertyId = 8006;
pub const PropertyId_Speech_LogFilename: PropertyId = 9001;
pub const PropertyId_Speech_SegmentationSilenceTimeoutMs: PropertyId = 9002;
pub const PropertyId_Conversation_ApplicationId: PropertyId = 10000;
pub const PropertyId_Conversation_DialogType: PropertyId = 10001;
pub const PropertyId_Conversation_Initial_Silence_Timeout: PropertyId = 10002;
pub const PropertyId_Conversation_From_Id: PropertyId = 10003;
pub const PropertyId_Conversation_Conversation_Id: PropertyId = 10004;
pub const PropertyId_Conversation_Custom_Voice_Deployment_Ids: PropertyId = 10005;
pub const PropertyId_Conversation_Speech_Activity_Template: PropertyId = 10006;
pub const PropertyId_Conversation_ParticipantId: PropertyId = 10007;
pub const PropertyId_DataBuffer_TimeStamp: PropertyId = 11001;
pub const PropertyId_DataBuffer_UserId: PropertyId = 11002;
pub const PropertyId_PronunciationAssessment_ReferenceText: PropertyId = 12001;
pub const PropertyId_PronunciationAssessment_GradingSystem: PropertyId = 12002;
pub const PropertyId_PronunciationAssessment_Granularity: PropertyId = 12003;
pub const PropertyId_PronunciationAssessment_EnableMiscue: PropertyId = 12005;
pub const PropertyId_PronunciationAssessment_PhonemeAlphabet: PropertyId = 12006;
pub const PropertyId_PronunciationAssessment_NBestPhonemeCount: PropertyId = 12007;
pub const PropertyId_PronunciationAssessment_EnableProsodyAssessment: PropertyId = 12008;
pub const PropertyId_PronunciationAssessment_Json: PropertyId = 12009;
pub const PropertyId_PronunciationAssessment_Params: PropertyId = 12010;
pub const PropertyId_PronunciationAssessment_ContentTopic: PropertyId = 12020;
pub const PropertyId_SpeakerRecognition_Api_Version: PropertyId = 13001;
pub const PropertyId_SpeechTranslation_ModelName: PropertyId = 13100;
pub const PropertyId_SpeechTranslation_ModelKey: PropertyId = 13101;
pub const PropertyId_KeywordRecognition_ModelName: PropertyId = 13200;
pub const PropertyId_KeywordRecognition_ModelKey: PropertyId = 13201;
pub const PropertyId_EmbeddedSpeech_EnablePerformanceMetrics: PropertyId = 13300;
pub type PropertyId = ::std::os::raw::c_uint;
pub const _ParticipantChangedReason_JoinedConversation: _ParticipantChangedReason = 0;
pub const _ParticipantChangedReason_LeftConversation: _ParticipantChangedReason = 1;
pub const _ParticipantChangedReason_Updated: _ParticipantChangedReason = 2;
pub type _ParticipantChangedReason = ::std::os::raw::c_uint;
pub use self::_ParticipantChangedReason as ParticipantChangedReason;
extern "C" {
    pub fn intent_result_get_intent_id(
        hresult: SPXRESULTHANDLE,
        pszIntentId: *mut ::std::os::raw::c_char,
        cchIntentId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_trigger_handle_is_valid(htrigger: SPXTRIGGERHANDLE) -> bool;
}
extern "C" {
    pub fn intent_trigger_create_from_phrase(
        htrigger: *mut SPXTRIGGERHANDLE,
        phrase: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_trigger_create_from_language_understanding_model(
        htrigger: *mut SPXTRIGGERHANDLE,
        hlumodel: SPXLUMODELHANDLE,
        intentName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_trigger_handle_release(htrigger: SPXTRIGGERHANDLE) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_add_intent(
        hreco: SPXRECOHANDLE,
        intentId: *const ::std::os::raw::c_char,
        htrigger: SPXTRIGGERHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_add_intent_with_model_id(
        hreco: SPXRECOHANDLE,
        htrigger: SPXTRIGGERHANDLE,
        modelId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_recognize_text_once(
        hreco: SPXRECOHANDLE,
        text: *const ::std::os::raw::c_char,
        hresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_clear_language_models(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_import_pattern_matching_model(
        hreco: SPXRECOHANDLE,
        jsonData: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn intent_recognizer_add_conversational_language_understanding_model(
        hreco: SPXRECOHANDLE,
        languageResourceKey: *const ::std::os::raw::c_char,
        endpoint: *const ::std::os::raw::c_char,
        projectName: *const ::std::os::raw::c_char,
        deploymentName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn translation_text_result_get_translation_count(
        handle: SPXRESULTHANDLE,
        size: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn translation_text_result_get_translation(
        handle: SPXRESULTHANDLE,
        index: size_t,
        language: *mut ::std::os::raw::c_char,
        text: *mut ::std::os::raw::c_char,
        language_size: *mut size_t,
        text_size: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn translation_synthesis_result_get_audio_data(
        handle: SPXRESULTHANDLE,
        audioBuffer: *mut u8,
        lengthPointer: *mut size_t,
    ) -> AZACHR;
}
pub type PTRANSLATIONSYNTHESIS_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn translator_synthesizing_audio_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PTRANSLATIONSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn translator_add_target_language(
        hreco: SPXRECOHANDLE,
        language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn translator_remove_target_language(
        hreco: SPXRECOHANDLE,
        language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn pattern_matching_model_handle_is_valid(hlumodel: SPXLUMODELHANDLE) -> bool;
}
extern "C" {
    pub fn pattern_matching_model_create(
        hlumodel: *mut SPXLUMODELHANDLE,
        hIntentReco: SPXRECOHANDLE,
        id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn pattern_matching_model_create_from_id(
        hlumodel: *mut SPXLUMODELHANDLE,
        id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
pub type PATTERN_MATCHING_MODEL_GET_STR_FROM_INDEX = ::std::option::Option<
    unsafe extern "C" fn(
        context: *mut ::std::os::raw::c_void,
        index: size_t,
        str_: *mut *const ::std::os::raw::c_char,
        size: *mut size_t,
    ) -> AZACHR,
>;
extern "C" {
    pub fn pattern_matching_model_add_entity(
        hlumodel: SPXLUMODELHANDLE,
        id: *const ::std::os::raw::c_char,
        type_: i32,
        mode: i32,
        numPhrases: size_t,
        phraseContext: *mut ::std::os::raw::c_void,
        phraseGetter: PATTERN_MATCHING_MODEL_GET_STR_FROM_INDEX,
    ) -> AZACHR;
}
extern "C" {
    pub fn pattern_matching_model_add_intent(
        hlumodel: SPXLUMODELHANDLE,
        id: *const ::std::os::raw::c_char,
        priority: u32,
        numPhrases: size_t,
        phraseContext: *mut ::std::os::raw::c_void,
        phraseGetter: PATTERN_MATCHING_MODEL_GET_STR_FROM_INDEX,
    ) -> AZACHR;
}
extern "C" {
    pub fn language_understanding_model_handle_is_valid(hlumodel: SPXLUMODELHANDLE) -> bool;
}
extern "C" {
    pub fn language_understanding_model_create_from_uri(
        hlumodel: *mut SPXLUMODELHANDLE,
        uri: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn language_understanding_model_create_from_app_id(
        hlumodel: *mut SPXLUMODELHANDLE,
        appId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn language_understanding_model_create_from_subscription(
        hlumodel: *mut SPXLUMODELHANDLE,
        subscriptionKey: *const ::std::os::raw::c_char,
        appId: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn language_understanding_model__handle_release(hlumodel: SPXLUMODELHANDLE) -> AZACHR;
}
extern "C" {
    pub fn language_understanding_model_get_model_id(
        hlumodel: SPXLUMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn keyword_recognition_model_handle_is_valid(hkeyword: SPXKEYWORDHANDLE) -> bool;
}
extern "C" {
    pub fn keyword_recognition_model_handle_release(hkeyword: SPXKEYWORDHANDLE) -> AZACHR;
}
extern "C" {
    pub fn keyword_recognition_model_create_from_file(
        fileName: *const ::std::os::raw::c_char,
        phkwmodel: *mut SPXKEYWORDHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn keyword_recognition_model_create_from_config(
        hconfig: SPXSPEECHCONFIGHANDLE,
        phkwmodel: *mut SPXKEYWORDHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn keyword_recognition_model_add_user_defined_wake_word(
        hkwmodel: SPXKEYWORDHANDLE,
        wakeWord: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for OGG OPUS."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Ogg_Opus: Audio_Stream_Container_Format = 257;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for MP3."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Mp3: Audio_Stream_Container_Format = 258;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for FLAC. Added in version 1.7.0."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Flac: Audio_Stream_Container_Format = 259;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for ALAW. Added in version 1.7.0."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Alaw: Audio_Stream_Container_Format = 260;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for MULAW. Added in version 1.7.0."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Mulaw: Audio_Stream_Container_Format = 261;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for AMRNB. Currently not supported."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Amrnb: Audio_Stream_Container_Format = 262;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for AMRWB. Currently not supported."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Amrwb: Audio_Stream_Container_Format = 263;
#[doc = " <summary>"]
#[doc = " Stream ContainerFormat definition for any other or unknown format."]
#[doc = " </summary>"]
pub const Audio_Stream_Container_Format_StreamFormat_Any: Audio_Stream_Container_Format = 264;
#[doc = " <summary>"]
#[doc = " Defines supported audio stream container format."]
#[doc = " Changed in version 1.4.0."]
#[doc = " </summary>"]
pub type Audio_Stream_Container_Format = ::std::os::raw::c_uint;
#[doc = " <summary>"]
#[doc = " Stream WaveFormat definition for PCM (pulse-code modulated) data in integer format."]
#[doc = " </summary>"]
pub const Audio_Stream_Wave_Format_StreamWaveFormat_PCM: Audio_Stream_Wave_Format = 1;
#[doc = " <summary>"]
#[doc = " Stream WaveFormat definition for A-law-encoded format."]
#[doc = " </summary>"]
pub const Audio_Stream_Wave_Format_StreamWaveFormat_ALAW: Audio_Stream_Wave_Format = 6;
#[doc = " <summary>"]
#[doc = " Stream WaveFormat definition for Mu-law-encoded format."]
#[doc = " </summary>"]
pub const Audio_Stream_Wave_Format_StreamWaveFormat_MULAW: Audio_Stream_Wave_Format = 7;
#[doc = " <summary>"]
#[doc = " Defines supported audio stream wave format in WAV container."]
#[doc = " </summary>"]
pub type Audio_Stream_Wave_Format = ::std::os::raw::c_uint;
extern "C" {
    pub fn audio_stream_format_is_handle_valid(hformat: SPXAUDIOSTREAMFORMATHANDLE) -> bool;
}
extern "C" {
    pub fn audio_stream_format_create_from_default_input(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_format_create_from_waveformat(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
        samplesPerSecond: u32,
        bitsPerSample: u8,
        channels: u8,
        waveFormat: Audio_Stream_Wave_Format,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_format_create_from_waveformat_pcm(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
        samplesPerSecond: u32,
        bitsPerSample: u8,
        channels: u8,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_format_create_from_default_output(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_format_create_from_compressed_format(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
        compressedFormat: Audio_Stream_Container_Format,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_format_release(hformat: SPXAUDIOSTREAMFORMATHANDLE) -> AZACHR;
}
pub const Result_Reason_ResultReason_NoMatch: Result_Reason = 0;
pub const Result_Reason_ResultReason_Canceled: Result_Reason = 1;
pub const Result_Reason_ResultReason_RecognizingSpeech: Result_Reason = 2;
pub const Result_Reason_ResultReason_RecognizedSpeech: Result_Reason = 3;
pub const Result_Reason_ResultReason_RecognizingIntent: Result_Reason = 4;
pub const Result_Reason_ResultReason_RecognizedIntent: Result_Reason = 5;
pub const Result_Reason_ResultReason_TranslatingSpeech: Result_Reason = 6;
pub const Result_Reason_ResultReason_TranslatedSpeech: Result_Reason = 7;
pub const Result_Reason_ResultReason_SynthesizingAudio: Result_Reason = 8;
pub const Result_Reason_ResultReason_SynthesizingAudioComplete: Result_Reason = 9;
pub const Result_Reason_ResultReason_RecognizingKeyword: Result_Reason = 10;
pub const Result_Reason_ResultReason_RecognizedKeyword: Result_Reason = 11;
pub const Result_Reason_ResultReason_SynthesizingAudioStart: Result_Reason = 12;
pub type Result_Reason = ::std::os::raw::c_uint;
pub const Result_CancellationReason_CancellationReason_Error: Result_CancellationReason = 1;
pub const Result_CancellationReason_CancellationReason_EndOfStream: Result_CancellationReason = 2;
pub const Result_CancellationReason_CancellationReason_UserCancelled: Result_CancellationReason = 3;
pub type Result_CancellationReason = ::std::os::raw::c_uint;
pub const Result_CancellationErrorCode_CancellationErrorCode_NoError: Result_CancellationErrorCode =
    0;
pub const Result_CancellationErrorCode_CancellationErrorCode_AuthenticationFailure:
    Result_CancellationErrorCode = 1;
pub const Result_CancellationErrorCode_CancellationErrorCode_BadRequest:
    Result_CancellationErrorCode = 2;
pub const Result_CancellationErrorCode_CancellationErrorCode_TooManyRequests:
    Result_CancellationErrorCode = 3;
pub const Result_CancellationErrorCode_CancellationErrorCode_Forbidden:
    Result_CancellationErrorCode = 4;
pub const Result_CancellationErrorCode_CancellationErrorCode_ConnectionFailure:
    Result_CancellationErrorCode = 5;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceTimeout:
    Result_CancellationErrorCode = 6;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceError:
    Result_CancellationErrorCode = 7;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceUnavailable:
    Result_CancellationErrorCode = 8;
pub const Result_CancellationErrorCode_CancellationErrorCode_RuntimeError:
    Result_CancellationErrorCode = 9;
pub type Result_CancellationErrorCode = ::std::os::raw::c_uint;
pub const Result_NoMatchReason_NoMatchReason_NotRecognized: Result_NoMatchReason = 1;
pub const Result_NoMatchReason_NoMatchReason_InitialSilenceTimeout: Result_NoMatchReason = 2;
pub const Result_NoMatchReason_NoMatchReason_InitialBabbleTimeout: Result_NoMatchReason = 3;
pub const Result_NoMatchReason_NoMatchReason_KeywordNotRecognized: Result_NoMatchReason = 4;
pub const Result_NoMatchReason_NoMatchReason_EndSilenceTimeout: Result_NoMatchReason = 5;
pub type Result_NoMatchReason = ::std::os::raw::c_uint;
pub const Synthesis_VoiceType_SynthesisVoiceType_OnlineNeural: Synthesis_VoiceType = 1;
pub const Synthesis_VoiceType_SynthesisVoiceType_OnlineStandard: Synthesis_VoiceType = 2;
pub const Synthesis_VoiceType_SynthesisVoiceType_OfflineNeural: Synthesis_VoiceType = 3;
pub const Synthesis_VoiceType_SynthesisVoiceType_OfflineStandard: Synthesis_VoiceType = 4;
pub type Synthesis_VoiceType = ::std::os::raw::c_uint;
extern "C" {
    pub fn result_get_reason(hresult: SPXRESULTHANDLE, reason: *mut Result_Reason) -> AZACHR;
}
extern "C" {
    pub fn result_get_reason_canceled(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_CancellationReason,
    ) -> AZACHR;
}
extern "C" {
    pub fn result_get_canceled_error_code(
        hresult: SPXRESULTHANDLE,
        errorCode: *mut Result_CancellationErrorCode,
    ) -> AZACHR;
}
extern "C" {
    pub fn result_get_no_match_reason(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_NoMatchReason,
    ) -> AZACHR;
}
extern "C" {
    pub fn result_get_result_id(
        hresult: SPXRESULTHANDLE,
        pszResultId: *mut ::std::os::raw::c_char,
        cchResultId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn result_get_text(
        hresult: SPXRESULTHANDLE,
        pszText: *mut ::std::os::raw::c_char,
        cchText: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn result_get_offset(hresult: SPXRESULTHANDLE, offset: *mut u64) -> AZACHR;
}
extern "C" {
    pub fn result_get_duration(hresult: SPXRESULTHANDLE, duration: *mut u64) -> AZACHR;
}
extern "C" {
    pub fn result_get_property_bag(hresult: SPXRESULTHANDLE, hpropbag: *mut AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_result_id(
        hresult: SPXRESULTHANDLE,
        resultId: *mut ::std::os::raw::c_char,
        resultIdLength: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_reason(hresult: SPXRESULTHANDLE, reason: *mut Result_Reason) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_reason_canceled(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_CancellationReason,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_canceled_error_code(
        hresult: SPXRESULTHANDLE,
        errorCode: *mut Result_CancellationErrorCode,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_audio_data(
        hresult: SPXRESULTHANDLE,
        buffer: *mut u8,
        bufferSize: u32,
        filledSize: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_audio_length_duration(
        hresult: SPXRESULTHANDLE,
        audioLength: *mut u32,
        audioDuration: *mut u64,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_audio_format(
        hresult: SPXRESULTHANDLE,
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synth_result_get_property_bag(
        hresult: SPXRESULTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesis_voices_result_get_result_id(
        hresult: SPXRESULTHANDLE,
        resultId: *mut ::std::os::raw::c_char,
        resultIdLength: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesis_voices_result_get_reason(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_Reason,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesis_voices_result_get_voice_num(
        hresult: SPXRESULTHANDLE,
        voiceNum: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesis_voices_result_get_voice_info(
        hresult: SPXRESULTHANDLE,
        index: u32,
        hVoiceInfo: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesis_voices_result_get_property_bag(
        hresult: SPXRESULTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_info_handle_release(hVoiceInfo: SPXRESULTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn voice_info_get_name(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_locale(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_short_name(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_local_name(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_style_list(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_voice_path(hVoiceInfo: SPXRESULTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn voice_info_get_voice_type(
        hVoiceInfo: SPXRESULTHANDLE,
        voiceType: *mut Synthesis_VoiceType,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_info_get_property_bag(
        hVoiceInfo: SPXRESULTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
pub const Stream_Status_StreamStatus_Unknown: Stream_Status = 0;
pub const Stream_Status_StreamStatus_NoData: Stream_Status = 1;
pub const Stream_Status_StreamStatus_PartialData: Stream_Status = 2;
pub const Stream_Status_StreamStatus_AllData: Stream_Status = 3;
pub const Stream_Status_StreamStatus_Canceled: Stream_Status = 4;
pub type Stream_Status = ::std::os::raw::c_uint;
extern "C" {
    pub fn audio_stream_is_handle_valid(haudioStream: SPXAUDIOSTREAMHANDLE) -> bool;
}
extern "C" {
    pub fn audio_stream_create_push_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_create_pull_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_create_pull_audio_output_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_create_push_audio_output_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_stream_release(haudioStream: SPXAUDIOSTREAMHANDLE) -> AZACHR;
}
pub type CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int,
>;
pub type CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(pvContext: *mut ::std::os::raw::c_void)>;
pub type CUSTOM_AUDIO_PULL_STREAM_GET_PROPERTY_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        id: ::std::os::raw::c_int,
        value: *mut u8,
        size: u32,
    ),
>;
extern "C" {
    pub fn pull_audio_input_stream_set_callbacks(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
        readCallback: CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK,
        closeCallback: CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK,
    ) -> AZACHR;
}
extern "C" {
    pub fn pull_audio_input_stream_set_getproperty_callback(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
        getPropertyCallback: CUSTOM_AUDIO_PULL_STREAM_GET_PROPERTY_CALLBACK,
    ) -> AZACHR;
}
extern "C" {
    pub fn push_audio_input_stream_write(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        size: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn push_audio_input_stream_close(haudioStream: SPXAUDIOSTREAMHANDLE) -> AZACHR;
}
extern "C" {
    pub fn push_audio_input_stream_set_property_by_id(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        id: ::std::os::raw::c_int,
        value: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn push_audio_input_stream_set_property_by_name(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn pull_audio_output_stream_read(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        bufferSize: u32,
        pfilledSize: *mut u32,
    ) -> AZACHR;
}
pub type CUSTOM_AUDIO_PUSH_STREAM_WRITE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int,
>;
pub type CUSTOM_AUDIO_PUSH_STREAM_CLOSE_CALLBACK =
    ::std::option::Option<unsafe extern "C" fn(pvContext: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn push_audio_output_stream_set_callbacks(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
        writeCallback: CUSTOM_AUDIO_PUSH_STREAM_WRITE_CALLBACK,
        closeCallback: CUSTOM_AUDIO_PUSH_STREAM_CLOSE_CALLBACK,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_is_handle_valid(haudioStream: SPXAUDIOSTREAMHANDLE) -> bool;
}
extern "C" {
    pub fn audio_data_stream_create_from_file(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_create_from_result(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hresult: SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_create_from_keyword_result(
        audioStreamHandle: *mut SPXAUDIOSTREAMHANDLE,
        resultHandle: SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_get_status(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        status: *mut Stream_Status,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_get_reason_canceled(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        reason: *mut Result_CancellationReason,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_get_canceled_error_code(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        errorCode: *mut Result_CancellationErrorCode,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_can_read_data(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        requestedSize: u32,
    ) -> bool;
}
extern "C" {
    pub fn audio_data_stream_can_read_data_from_position(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        requestedSize: u32,
        position: u32,
    ) -> bool;
}
extern "C" {
    pub fn audio_data_stream_read(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        bufferSize: u32,
        pfilledSize: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_read_from_position(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        bufferSize: u32,
        position: u32,
        pfilledSize: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_save_to_wave_file(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_get_position(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        position: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_set_position(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        position: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_detach_input(audioStreamHandle: SPXAUDIOSTREAMHANDLE) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_get_property_bag(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_data_stream_release(haudioStream: SPXAUDIOSTREAMHANDLE) -> AZACHR;
}
extern "C" {
    pub fn audio_config_is_handle_valid(haudioConfig: SPXAUDIOCONFIGHANDLE) -> bool;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_default_microphone(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_a_microphone(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        deviceName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_wav_file_name(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_push_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_pull_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_output_from_default_speaker(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_output_from_a_speaker(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        deviceName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_output_from_wav_file_name(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_create_audio_output_from_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_set_audio_processing_options(
        haudioConfig: SPXAUDIOCONFIGHANDLE,
        haudioProcessingOptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_get_audio_processing_options(
        haudioConfig: SPXAUDIOCONFIGHANDLE,
        haudioProcessingOptions: *mut SPXAUDIOPROCESSINGOPTIONSHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_config_release(haudioConfig: SPXAUDIOCONFIGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn audio_config_get_property_bag(
        haudioConfig: SPXAUDIOCONFIGHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
#[doc = " <summary>"]
#[doc = " Indicates that no geometry specified. Speech SDK will determine the microphone array geometry."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Uninitialized : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 0 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with one microphone in the center and six microphones evenly spaced"]
#[doc = " in a circle with radius approximately equal to 42.5 mm."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Circular7 : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 1 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with one microphone in the center and three microphones evenly spaced"]
#[doc = " in a circle with radius approximately equal to 42.5 mm."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Circular4 : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 2 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with four linearly placed microphones with 40 mm spacing between them."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Linear4 : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 3 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with two linearly placed microphones with 40 mm spacing between them."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Linear2 : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 4 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with a single microphone."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Mono : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 5 ;
#[doc = " <summary>"]
#[doc = " Indicates a microphone array with custom geometry."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_PresetMicrophoneArrayGeometry_AudioProcessingOptions_PresetMicrophoneArrayGeometry_Custom : AudioProcessingOptions_PresetMicrophoneArrayGeometry = 6 ;
#[doc = " <summary>"]
#[doc = " Types of preset microphone array geometries."]
#[doc = " See [Microphone Array Recommendations](/azure/cognitive-services/speech-service/speech-devices-sdk-microphone) for more details."]
#[doc = " </summary>"]
pub type AudioProcessingOptions_PresetMicrophoneArrayGeometry = ::std::os::raw::c_uint;
pub const AudioProcessingOptions_MicrophoneArrayType_AudioProcessingOptions_MicrophoneArrayType_Linear : AudioProcessingOptions_MicrophoneArrayType = 0 ;
pub const AudioProcessingOptions_MicrophoneArrayType_AudioProcessingOptions_MicrophoneArrayType_Planar : AudioProcessingOptions_MicrophoneArrayType = 1 ;
#[doc = " <summary>"]
#[doc = " Types of microphone arrays."]
#[doc = " </summary>"]
pub type AudioProcessingOptions_MicrophoneArrayType = ::std::os::raw::c_uint;
#[doc = " <summary>"]
#[doc = " Indicates that the input audio does not have a speaker reference channel."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_SpeakerReferenceChannel_AudioProcessingOptions_SpeakerReferenceChannel_None : AudioProcessingOptions_SpeakerReferenceChannel = 0 ;
#[doc = " <summary>"]
#[doc = " Indicates that the last channel in the input audio corresponds to the speaker"]
#[doc = " reference for echo cancellation."]
#[doc = " </summary>"]
pub const AudioProcessingOptions_SpeakerReferenceChannel_AudioProcessingOptions_SpeakerReferenceChannel_LastChannel : AudioProcessingOptions_SpeakerReferenceChannel = 1 ;
#[doc = " <summary>"]
#[doc = " Defines speaker reference channel position in input audio."]
#[doc = " </summary>"]
pub type AudioProcessingOptions_SpeakerReferenceChannel = ::std::os::raw::c_uint;
#[doc = " <summary>"]
#[doc = " Represents coordinates of a microphone."]
#[doc = " </summary>"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct AudioProcessingOptions_MicrophoneCoordinates {
    #[doc = " <summary>"]
    #[doc = " X-coordinate of the microphone in millimeters."]
    #[doc = " </summary>"]
    pub X: ::std::os::raw::c_int,
    #[doc = " <summary>"]
    #[doc = " Y-coordinate of the microphone in millimeters."]
    #[doc = " </summary>"]
    pub Y: ::std::os::raw::c_int,
    #[doc = " <summary>"]
    #[doc = " Z-coordinate of the microphone in millimeters."]
    #[doc = " </summary>"]
    pub Z: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_AudioProcessingOptions_MicrophoneCoordinates() {
    assert_eq!(
        ::std::mem::size_of::<AudioProcessingOptions_MicrophoneCoordinates>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(AudioProcessingOptions_MicrophoneCoordinates)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioProcessingOptions_MicrophoneCoordinates>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(AudioProcessingOptions_MicrophoneCoordinates)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneCoordinates>())).X as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneCoordinates),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneCoordinates>())).Y as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneCoordinates),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneCoordinates>())).Z as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneCoordinates),
            "::",
            stringify!(Z)
        )
    );
}
#[doc = " <summary>"]
#[doc = " Represents the geometry of a microphone array."]
#[doc = " </summary>"]
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct AudioProcessingOptions_MicrophoneArrayGeometry {
    #[doc = " <summary>"]
    #[doc = " Type of microphone array."]
    #[doc = " </summary>"]
    pub microphoneArrayType: AudioProcessingOptions_MicrophoneArrayType,
    #[doc = " <summary>"]
    #[doc = " Start angle for beamforming in degrees."]
    #[doc = " </summary>"]
    pub beamformingStartAngle: u16,
    #[doc = " <summary>"]
    #[doc = " End angle for beamforming in degrees."]
    #[doc = " </summary>"]
    pub beamformingEndAngle: u16,
    #[doc = " <summary>"]
    #[doc = " Number of microphones in the microphone array."]
    #[doc = " </summary>"]
    pub numberOfMicrophones: u16,
    #[doc = " <summary>"]
    #[doc = " Coordinates of microphones in the microphone array."]
    #[doc = " </summary>"]
    pub microphoneCoordinates: *mut AudioProcessingOptions_MicrophoneCoordinates,
}
#[test]
fn bindgen_test_layout_AudioProcessingOptions_MicrophoneArrayGeometry() {
    assert_eq!(
        ::std::mem::size_of::<AudioProcessingOptions_MicrophoneArrayGeometry>(),
        18usize,
        concat!(
            "Size of: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<AudioProcessingOptions_MicrophoneArrayGeometry>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneArrayGeometry>()))
                .microphoneArrayType as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry),
            "::",
            stringify!(microphoneArrayType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneArrayGeometry>()))
                .beamformingStartAngle as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry),
            "::",
            stringify!(beamformingStartAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneArrayGeometry>()))
                .beamformingEndAngle as *const _ as usize
        },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry),
            "::",
            stringify!(beamformingEndAngle)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneArrayGeometry>()))
                .numberOfMicrophones as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry),
            "::",
            stringify!(numberOfMicrophones)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<AudioProcessingOptions_MicrophoneArrayGeometry>()))
                .microphoneCoordinates as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(AudioProcessingOptions_MicrophoneArrayGeometry),
            "::",
            stringify!(microphoneCoordinates)
        )
    );
}
pub const AUDIO_INPUT_PROCESSING_NONE: ::std::os::raw::c_int = 0;
pub const AUDIO_INPUT_PROCESSING_ENABLE_DEFAULT: ::std::os::raw::c_int = 1;
pub const AUDIO_INPUT_PROCESSING_DISABLE_DEREVERBERATION: ::std::os::raw::c_int = 2;
pub const AUDIO_INPUT_PROCESSING_DISABLE_NOISE_SUPPRESSION: ::std::os::raw::c_int = 4;
pub const AUDIO_INPUT_PROCESSING_DISABLE_GAIN_CONTROL: ::std::os::raw::c_int = 8;
pub const AUDIO_INPUT_PROCESSING_DISABLE_ECHO_CANCELLATION: ::std::os::raw::c_int = 16;
pub const AUDIO_INPUT_PROCESSING_ENABLE_VOICE_ACTIVITY_DETECTION: ::std::os::raw::c_int = 32;
pub const AUDIO_INPUT_PROCESSING_ENABLE_V2: ::std::os::raw::c_int = 64;
extern "C" {
    pub fn audio_processing_options_is_handle_valid(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn audio_processing_options_create(
        hoptions: *mut SPXAUDIOPROCESSINGOPTIONSHANDLE,
        audioProcessingFlags: ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_create_from_preset_microphone_array_geometry(
        hoptions: *mut SPXAUDIOPROCESSINGOPTIONSHANDLE,
        audioProcessingFlags: ::std::os::raw::c_int,
        microphoneArrayGeometry: AudioProcessingOptions_PresetMicrophoneArrayGeometry,
        speakerReferenceChannel: AudioProcessingOptions_SpeakerReferenceChannel,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_create_from_microphone_array_geometry(
        hoptions: *mut SPXAUDIOPROCESSINGOPTIONSHANDLE,
        audioProcessingFlags: ::std::os::raw::c_int,
        microphoneArrayGeometry: *const AudioProcessingOptions_MicrophoneArrayGeometry,
        speakerReferenceChannel: AudioProcessingOptions_SpeakerReferenceChannel,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_audio_processing_flags(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        audioProcessingFlags: *mut ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_preset_microphone_array_geometry(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        microphoneArrayGeometry: *mut AudioProcessingOptions_PresetMicrophoneArrayGeometry,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_microphone_array_type(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        microphoneArrayType: *mut AudioProcessingOptions_MicrophoneArrayType,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_beamforming_start_angle(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        startAngle: *mut u16,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_beamforming_end_angle(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        endAngle: *mut u16,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_microphone_count(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        microphoneCount: *mut u16,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_microphone_coordinates(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        microphoneCoordinates: *mut AudioProcessingOptions_MicrophoneCoordinates,
        microphoneCount: u16,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_speaker_reference_channel(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        speakerReferenceChannel: *mut AudioProcessingOptions_SpeakerReferenceChannel,
    ) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_release(hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE) -> AZACHR;
}
extern "C" {
    pub fn audio_processing_options_get_property_bag(
        hoptions: SPXAUDIOPROCESSINGOPTIONSHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
pub const SpeechOutputFormat_SpeechOutputFormat_Simple: SpeechOutputFormat = 0;
pub const SpeechOutputFormat_SpeechOutputFormat_Detailed: SpeechOutputFormat = 1;
pub type SpeechOutputFormat = ::std::os::raw::c_uint;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw8Khz8BitMonoMULaw:
    Speech_Synthesis_Output_Format = 1;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff16Khz16KbpsMonoSiren:
    Speech_Synthesis_Output_Format = 2;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio16Khz16KbpsMonoSiren:
    Speech_Synthesis_Output_Format = 3;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio16Khz32KBitRateMonoMp3:
    Speech_Synthesis_Output_Format = 4;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio16Khz128KBitRateMonoMp3 : Speech_Synthesis_Output_Format = 5 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio16Khz64KBitRateMonoMp3:
    Speech_Synthesis_Output_Format = 6;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio24Khz48KBitRateMonoMp3:
    Speech_Synthesis_Output_Format = 7;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio24Khz96KBitRateMonoMp3:
    Speech_Synthesis_Output_Format = 8;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio24Khz160KBitRateMonoMp3 : Speech_Synthesis_Output_Format = 9 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw16Khz16BitMonoTrueSilk:
    Speech_Synthesis_Output_Format = 10;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff16Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 11;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff8Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 12;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff24Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 13;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff8Khz8BitMonoMULaw:
    Speech_Synthesis_Output_Format = 14;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw16Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 15;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw24Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 16;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw8Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 17;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Ogg16khz16BitMonoOpus:
    Speech_Synthesis_Output_Format = 18;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Ogg24Khz16BitMonoOpus:
    Speech_Synthesis_Output_Format = 19;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw48Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 20;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff48Khz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 21;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio48Khz96KBitRateMonoMp3:
    Speech_Synthesis_Output_Format = 22;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio48Khz192KBitRateMonoMp3 : Speech_Synthesis_Output_Format = 23 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Ogg48Khz16BitMonoOpus:
    Speech_Synthesis_Output_Format = 24;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Webm16Khz16BitMonoOpus:
    Speech_Synthesis_Output_Format = 25;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Webm24Khz16BitMonoOpus:
    Speech_Synthesis_Output_Format = 26;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw24Khz16BitMonoTrueSilk:
    Speech_Synthesis_Output_Format = 27;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw8Khz8BitMonoALaw:
    Speech_Synthesis_Output_Format = 28;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff8Khz8BitMonoALaw:
    Speech_Synthesis_Output_Format = 29;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Webm24Khz16Bit24KbpsMonoOpus : Speech_Synthesis_Output_Format = 30 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio16Khz16Bit32KbpsMonoOpus : Speech_Synthesis_Output_Format = 31 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio24Khz16Bit48KbpsMonoOpus : Speech_Synthesis_Output_Format = 32 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Audio24Khz16Bit24KbpsMonoOpus : Speech_Synthesis_Output_Format = 33 ;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw22050Hz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 34;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff22050Hz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 35;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Raw44100Hz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 36;
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_Riff44100Hz16BitMonoPcm:
    Speech_Synthesis_Output_Format = 37;
#[doc = " amr-wb-16000hz"]
#[doc = " AMR-WB audio at 16kHz sampling rate."]
#[doc = " (Added in 1.24.0)"]
pub const Speech_Synthesis_Output_Format_SpeechSynthesisOutputFormat_AmrWb16000Hz:
    Speech_Synthesis_Output_Format = 38;
pub type Speech_Synthesis_Output_Format = ::std::os::raw::c_uint;
pub const SpeechConfig_ServicePropertyChannel_SpeechConfig_ServicePropertyChannel_UriQueryParameter : SpeechConfig_ServicePropertyChannel = 0 ;
pub const SpeechConfig_ServicePropertyChannel_SpeechConfig_ServicePropertyChannel_HttpHeader:
    SpeechConfig_ServicePropertyChannel = 1;
pub type SpeechConfig_ServicePropertyChannel = ::std::os::raw::c_uint;
pub const SpeechConfig_ProfanityOption_SpeechConfig_ProfanityMasked: SpeechConfig_ProfanityOption =
    0;
pub const SpeechConfig_ProfanityOption_SpeechConfig_ProfanityRemoved: SpeechConfig_ProfanityOption =
    1;
pub const SpeechConfig_ProfanityOption_SpeechConfig_ProfanityRaw: SpeechConfig_ProfanityOption = 2;
pub type SpeechConfig_ProfanityOption = ::std::os::raw::c_uint;
extern "C" {
    pub fn speech_config_is_handle_valid(hconfig: SPXSPEECHCONFIGHANDLE) -> bool;
}
extern "C" {
    pub fn speech_config_from_subscription(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_from_authorization_token(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        authToken: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_from_endpoint(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        endpoint: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_from_host(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        host: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_release(hconfig: SPXSPEECHCONFIGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_config_get_property_bag(
        hconfig: SPXSPEECHCONFIGHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_set_audio_output_format(
        hconfig: SPXSPEECHCONFIGHANDLE,
        formatId: Speech_Synthesis_Output_Format,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_set_service_property(
        configHandle: SPXSPEECHCONFIGHANDLE,
        propertyName: *const ::std::os::raw::c_char,
        propertyValue: *const ::std::os::raw::c_char,
        channel: SpeechConfig_ServicePropertyChannel,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_config_set_profanity(
        configHandle: SPXSPEECHCONFIGHANDLE,
        profanity: SpeechConfig_ProfanityOption,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_recognition_model_handle_release(hmodel: SPXSPEECHRECOMODELHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_recognition_model_get_name(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_recognition_model_get_locales(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_recognition_model_get_path(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_recognition_model_get_version(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_translation_model_handle_release(hmodel: SPXSPEECHRECOMODELHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_model_get_name(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_translation_model_get_source_languages(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_translation_model_get_target_languages(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_translation_model_get_path(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn speech_translation_model_get_version(
        hmodel: SPXSPEECHRECOMODELHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn embedded_speech_config_create(hconfig: *mut SPXSPEECHCONFIGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn embedded_speech_config_add_path(
        hconfig: SPXSPEECHCONFIGHANDLE,
        path: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn embedded_speech_config_get_num_speech_reco_models(
        hconfig: SPXSPEECHCONFIGHANDLE,
        numModels: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn embedded_speech_config_get_speech_reco_model(
        hconfig: SPXSPEECHCONFIGHANDLE,
        index: u32,
        hmodel: *mut SPXSPEECHRECOMODELHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn embedded_speech_config_get_num_speech_translation_models(
        hconfig: SPXSPEECHCONFIGHANDLE,
        numModels: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn embedded_speech_config_get_speech_translation_model(
        hconfig: SPXSPEECHCONFIGHANDLE,
        index: u32,
        hmodel: *mut SPXSPEECHRECOMODELHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn hybrid_speech_config_create(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        hcloudSpeechConfig: SPXSPEECHCONFIGHANDLE,
        hembeddedSpeechConfig: SPXSPEECHCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_from_subscription(
        configHandle: *mut SPXSPEECHCONFIGHANDLE,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_from_authorization_token(
        configHandle: *mut SPXSPEECHCONFIGHANDLE,
        authToken: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_from_endpoint(
        configHandle: *mut SPXSPEECHCONFIGHANDLE,
        endpoint: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_from_host(
        configHandle: *mut SPXSPEECHCONFIGHANDLE,
        host: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_add_target_language(
        configHandle: SPXSPEECHCONFIGHANDLE,
        language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_translation_config_remove_target_language(
        configHandle: SPXSPEECHCONFIGHANDLE,
        language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_speech_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_speech_recognizer_from_auto_detect_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hautoDetectSourceLangConfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_speech_recognizer_from_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hSourceLangConfig: SPXSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_translation_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_translation_recognizer_from_auto_detect_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hautoDetectSourceLangConfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_intent_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_keyword_recognizer_from_audio_config(
        phreco: *mut SPXRECOHANDLE,
        haudio: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_source_language_recognizer_from_auto_detect_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hautoDetectSourceLangConfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_create_speech_synthesizer_from_config(
        phsynth: *mut SPXSYNTHHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioOuput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_create_speech_synthesizer_from_auto_detect_source_lang_config(
        phsynth: *mut SPXSYNTHHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hautoDetectSourceLangConfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        haudioOutput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_create_dialog_service_connector_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_conversation_transcriber_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_conversation_transcriber_from_auto_detect_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hautoDetectSourceLangConfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_conversation_transcriber_from_source_lang_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        hSourceLangConfig: SPXSOURCELANGCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_join_conversation(
        hconv: SPXCONVERSATIONHANDLE,
        hreco: SPXRECOHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_leave_conversation(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_meeting_transcriber_from_config(
        phreco: *mut SPXRECOHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_join_meeting(hmeeting: SPXMEETINGHANDLE, hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_leave_meeting(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn transcriber_get_participants_list(
        hreco: SPXRECOHANDLE,
        participants: *mut SPXPARTICIPANTHANDLE,
        size: ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_handle_is_valid(hreco: SPXRECOHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_handle_release(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_async_handle_is_valid(hasync: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_async_handle_release(hasync: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_result_handle_is_valid(hresult: SPXRESULTHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_result_handle_release(hresult: SPXRESULTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_event_handle_is_valid(hevent: SPXEVENTHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_event_handle_release(hevent: SPXEVENTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_get_property_bag(hreco: SPXRECOHANDLE, hpropbag: *mut AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_once(
        hreco: SPXRECOHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_once_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_text_once_async(
        hreco: SPXRECOHANDLE,
        text: *const ::std::os::raw::c_char,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_once_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_keyword_once(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_keyword_once_async(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognize_keyword_once_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition(hreco: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
pub type PSESSION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn recognizer_session_started_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_session_stopped_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
pub type PRECOGNITION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn recognizer_recognizing_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognized_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_canceled_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_speech_start_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_speech_end_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_session_event_get_session_id(
        hevent: SPXEVENTHANDLE,
        pszSessionId: *mut ::std::os::raw::c_char,
        cchSessionId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognition_event_get_offset(
        hevent: SPXEVENTHANDLE,
        pszOffset: *mut u64,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_recognition_event_get_result(
        hevent: SPXEVENTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_connection_event_get_property_bag(
        hevent: SPXEVENTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_create(
        textStreamingEnabled: bool,
        isSSML: bool,
        inputText: *const ::std::os::raw::c_char,
        textLength: u32,
        hrequest: *mut SPXREQUESTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_send_text_piece(
        hrequest: SPXREQUESTHANDLE,
        text: *const ::std::os::raw::c_char,
        textLength: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_finish(hrequest: SPXREQUESTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_handle_is_valid(hrequest: SPXREQUESTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_release(hrequest: SPXREQUESTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speech_synthesis_request_get_property_bag(
        hrequest: SPXREQUESTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_from_recognizer(
        recognizerHandle: SPXRECOHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_from_conversation_translator(
        convTransHandle: SPXCONVERSATIONTRANSLATORHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_from_dialog_service_connector(
        convTransHandle: SPXRECOHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_from_speech_synthesizer(
        synthesizerHandle: SPXSYNTHHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_handle_is_valid(handle: SPXCONNECTIONHANDLE) -> bool;
}
extern "C" {
    pub fn connection_handle_release(handle: SPXCONNECTIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn connection_async_handle_release(hasync: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn connection_open(handle: SPXCONNECTIONHANDLE, forContinuousRecognition: bool) -> AZACHR;
}
extern "C" {
    pub fn connection_close(handle: SPXCONNECTIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn connection_set_message_property(
        handle: SPXCONNECTIONHANDLE,
        path: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_send_message(
        handle: SPXCONNECTIONHANDLE,
        path: *const ::std::os::raw::c_char,
        payload: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_send_message_async(
        handle: SPXCONNECTIONHANDLE,
        path: *const ::std::os::raw::c_char,
        payload: *const ::std::os::raw::c_char,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_send_message_data(
        handle: SPXCONNECTIONHANDLE,
        path: *const ::std::os::raw::c_char,
        data: *mut u8,
        size: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_send_message_data_async(
        handle: SPXCONNECTIONHANDLE,
        path: *const ::std::os::raw::c_char,
        data: *mut u8,
        size: u32,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_send_message_wait_for(hasync: SPXASYNCHANDLE, milliseconds: u32) -> AZACHR;
}
extern "C" {
    pub fn connection_get_property_bag(hconn: SPXRECOHANDLE, hpropbag: *mut AZAC_HANDLE) -> AZACHR;
}
pub type CONNECTION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(event: SPXEVENTHANDLE, context: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn connection_connected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_disconnected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_message_received_set_callback(
        connection: SPXCONNECTIONHANDLE,
        callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_message_received_event_handle_is_valid(hevent: SPXEVENTHANDLE) -> bool;
}
extern "C" {
    pub fn connection_message_received_event_handle_release(hevent: SPXEVENTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn connection_message_received_event_get_message(
        hevent: SPXEVENTHANDLE,
        hcm: *mut SPXCONNECTIONMESSAGEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_message_handle_is_valid(handle: SPXCONNECTIONMESSAGEHANDLE) -> bool;
}
extern "C" {
    pub fn connection_message_handle_release(handle: SPXCONNECTIONMESSAGEHANDLE) -> AZACHR;
}
extern "C" {
    pub fn connection_message_get_property_bag(
        hcm: SPXCONNECTIONMESSAGEHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_message_get_data(
        hcm: SPXCONNECTIONMESSAGEHANDLE,
        data: *mut u8,
        size: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn connection_message_get_data_size(hcm: SPXCONNECTIONMESSAGEHANDLE) -> u32;
}
pub const SpeechSynthesis_BoundaryType_SpeechSynthesis_BoundaryType_Word:
    SpeechSynthesis_BoundaryType = 0;
pub const SpeechSynthesis_BoundaryType_SpeechSynthesis_BoundaryType_Punctuation:
    SpeechSynthesis_BoundaryType = 1;
pub const SpeechSynthesis_BoundaryType_SpeechSynthesis_BoundaryType_Sentence:
    SpeechSynthesis_BoundaryType = 2;
pub type SpeechSynthesis_BoundaryType = ::std::os::raw::c_uint;
extern "C" {
    pub fn synthesizer_handle_is_valid(hsynth: SPXSYNTHHANDLE) -> bool;
}
extern "C" {
    pub fn synthesizer_handle_release(hsynth: SPXSYNTHHANDLE) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_async_handle_is_valid(hasync: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn synthesizer_async_handle_release(hasync: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_result_handle_is_valid(hresult: SPXRESULTHANDLE) -> bool;
}
extern "C" {
    pub fn synthesizer_result_handle_release(hresult: SPXRESULTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_event_handle_is_valid(hevent: SPXEVENTHANDLE) -> bool;
}
extern "C" {
    pub fn synthesizer_event_handle_release(hevent: SPXEVENTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_get_property_bag(
        hsynth: SPXSYNTHHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_text(
        hsynth: SPXSYNTHHANDLE,
        text: *const ::std::os::raw::c_char,
        textLength: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_ssml(
        hsynth: SPXSYNTHHANDLE,
        ssml: *const ::std::os::raw::c_char,
        ssmlLength: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_request(
        hsynth: SPXSYNTHHANDLE,
        hrequest: SPXREQUESTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_text_async(
        hsynth: SPXSYNTHHANDLE,
        text: *const ::std::os::raw::c_char,
        textLength: u32,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_ssml_async(
        hsynth: SPXSYNTHHANDLE,
        ssml: *const ::std::os::raw::c_char,
        ssmlLength: u32,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_request_async(
        hsynth: SPXSYNTHHANDLE,
        hrequest: SPXREQUESTHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_start_speaking_text(
        hsynth: SPXSYNTHHANDLE,
        text: *const ::std::os::raw::c_char,
        textLength: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_start_speaking_ssml(
        hsynth: SPXSYNTHHANDLE,
        ssml: *const ::std::os::raw::c_char,
        ssmlLength: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_start_speaking_request(
        hsynth: SPXSYNTHHANDLE,
        hrequest: SPXREQUESTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_start_speaking_text_async(
        hsynth: SPXSYNTHHANDLE,
        text: *const ::std::os::raw::c_char,
        textLength: u32,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_start_speaking_ssml_async(
        hsynth: SPXSYNTHHANDLE,
        ssml: *const ::std::os::raw::c_char,
        ssmlLength: u32,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_speak_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_stop_speaking(hsynth: SPXSYNTHHANDLE) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_stop_speaking_async(
        hsynth: SPXSYNTHHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_stop_speaking_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_get_voices_list(
        hsynth: SPXSYNTHHANDLE,
        locale: *const ::std::os::raw::c_char,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_get_voices_list_async(
        hsynth: SPXSYNTHHANDLE,
        locale: *const ::std::os::raw::c_char,
        phasync: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_get_voices_list_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
pub type PSYNTHESIS_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hsynth: SPXSYNTHHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn synthesizer_started_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_synthesizing_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_completed_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_canceled_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_word_boundary_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_viseme_received_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_bookmark_reached_set_callback(
        hsynth: SPXSYNTHHANDLE,
        pCallback: PSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_connection_connected_set_callback(
        hConnection: SPXCONNECTIONHANDLE,
        pCallback: CONNECTION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_connection_disconnected_set_callback(
        hConnection: SPXCONNECTIONHANDLE,
        pCallback: CONNECTION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_synthesis_event_get_result(
        hevent: SPXEVENTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_word_boundary_event_get_values(
        hevent: SPXEVENTHANDLE,
        pAudioOffset: *mut u64,
        pDuration: *mut u64,
        pTextOffset: *mut u32,
        pWordLength: *mut u32,
        pBoundaryType: *mut SpeechSynthesis_BoundaryType,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_event_get_result_id(
        hEvent: SPXEVENTHANDLE,
        resultId: *mut ::std::os::raw::c_char,
        resultIdLength: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_event_get_text(hEvent: SPXEVENTHANDLE) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn synthesizer_viseme_event_get_values(
        hevent: SPXEVENTHANDLE,
        pAudioOffset: *mut u64,
        pVisemeId: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn synthesizer_viseme_event_get_animation(
        hEvent: SPXEVENTHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn synthesizer_bookmark_event_get_values(
        hevent: SPXEVENTHANDLE,
        pAudioOffset: *mut u64,
    ) -> AZACHR;
}
pub const GrammarList_RecognitionFactorScope_PartialPhrase: GrammarList_RecognitionFactorScope = 1;
pub type GrammarList_RecognitionFactorScope = ::std::os::raw::c_uint;
extern "C" {
    pub fn grammar_handle_is_valid(hgrammar: SPXGRAMMARHANDLE) -> bool;
}
extern "C" {
    pub fn phrase_list_grammar_from_recognizer_by_name(
        hgrammar: *mut SPXGRAMMARHANDLE,
        hreco: SPXRECOHANDLE,
        name: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn grammar_handle_release(hgrammar: SPXGRAMMARHANDLE) -> AZACHR;
}
extern "C" {
    pub fn phrase_list_grammar_add_phrase(
        hgrammar: SPXGRAMMARHANDLE,
        hphrase: SPXPHRASEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn phrase_list_grammar_clear(hgrammar: SPXGRAMMARHANDLE) -> AZACHR;
}
extern "C" {
    pub fn grammar_phrase_handle_is_valid(hphrase: SPXPHRASEHANDLE) -> bool;
}
extern "C" {
    pub fn grammar_phrase_create_from_text(
        hphrase: *mut SPXPHRASEHANDLE,
        phrase: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn grammar_phrase_handle_release(hphrase: SPXPHRASEHANDLE) -> AZACHR;
}
extern "C" {
    pub fn grammar_create_from_storage_id(
        hgrammarlist: *mut SPXGRAMMARHANDLE,
        id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn grammar_list_from_recognizer(
        hgrammarlist: *mut SPXGRAMMARHANDLE,
        hreco: SPXRECOHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn grammar_list_add_grammar(
        hgrammarlist: SPXGRAMMARHANDLE,
        hgrammar: SPXGRAMMARHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn grammar_list_set_recognition_factor(
        hgrammarlist: SPXGRAMMARHANDLE,
        factor: f64,
        scope: GrammarList_RecognitionFactorScope,
    ) -> AZACHR;
}
extern "C" {
    pub fn class_language_model_from_storage_id(
        hclm: *mut SPXGRAMMARHANDLE,
        storageid: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn class_language_model_assign_class(
        hclm: SPXGRAMMARHANDLE,
        classname: *const ::std::os::raw::c_char,
        hgrammar: SPXGRAMMARHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn session_from_recognizer(
        hreco: SPXRECOHANDLE,
        phsession: *mut SPXSESSIONHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn session_handle_is_valid(hsession: SPXSESSIONHANDLE) -> bool;
}
extern "C" {
    pub fn session_handle_release(hsession: SPXSESSIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn session_get_property_bag(
        hsession: SPXSESSIONHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn bot_framework_config_from_subscription(
        ph_config: *mut SPXSPEECHCONFIGHANDLE,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
        bot_Id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn bot_framework_config_from_authorization_token(
        ph_config: *mut SPXSPEECHCONFIGHANDLE,
        auth_token: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
        bot_Id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn custom_commands_config_from_subscription(
        ph_dialog_service_config: *mut SPXSPEECHCONFIGHANDLE,
        app_id: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn custom_commands_config_from_authorization_token(
        ph_dialog_service_config: *mut SPXSPEECHCONFIGHANDLE,
        app_id: *const ::std::os::raw::c_char,
        auth_token: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_handle_is_valid(h_connector: SPXRECOHANDLE) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_handle_release(h_connector: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_async_handle_is_valid(h_async: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_async_handle_release(h_async: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_async_void_handle_is_valid(h_async: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_async_void_handle_release(h_async: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_async_string_handle_is_valid(h_async: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_async_string_handle_release(h_async: SPXASYNCHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_async_reco_result_handle_is_valid(
        h_async: SPXASYNCHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_async_reco_result_handle_release(
        h_async: SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_handle_is_valid(
        h_event: SPXEVENTHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_release(
        h_event: SPXEVENTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_handle_is_valid(
        h_event: SPXEVENTHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_release(h_event: SPXEVENTHANDLE)
        -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_get_property_bag(
        h_connector: SPXRECOHANDLE,
        h_prop_bag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_connect(h_connector: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_connect_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_connect_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_disconnect(h_connector: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_disconnect_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_disconnect_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_send_activity(
        h_connector: SPXRECOHANDLE,
        activity: *const ::std::os::raw::c_char,
        interaction_id: *mut ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_send_activity_async(
        h_connector: SPXRECOHANDLE,
        activity: *const ::std::os::raw::c_char,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_send_activity_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
        interaction_id: *mut ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_start_keyword_recognition(
        h_connector: SPXRECOHANDLE,
        h_keyword: SPXKEYWORDHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_start_keyword_recognition_async(
        h_connector: SPXRECOHANDLE,
        h_keyword: SPXKEYWORDHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_start_keyword_recognition_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_stop_keyword_recognition(h_connector: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_stop_keyword_recognition_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_stop_keyword_recognition_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_listen_once(
        h_connector: SPXRECOHANDLE,
        p_result: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_listen_once_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_listen_once_async_wait_for(
        h_async: SPXASYNCHANDLE,
        milliseconds: u32,
        p_result: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_start_continuous_listening(
        h_connector: SPXRECOHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_start_continuous_listening_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_stop_listening(h_connector: SPXRECOHANDLE) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_stop_listening_async(
        h_connector: SPXRECOHANDLE,
        p_async: *mut SPXASYNCHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_session_started_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PSESSION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_session_stopped_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PSESSION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_speech_start_detected_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PSESSION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_speech_end_detected_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PSESSION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_recognized_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PRECOGNITION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_recognizing_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PRECOGNITION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_canceled_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PRECOGNITION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PRECOGNITION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_set_callback(
        h_connector: SPXRECOHANDLE,
        p_callback: PRECOGNITION_CALLBACK_FUNC,
        pv_context: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_get_activity_size(
        h_event: SPXEVENTHANDLE,
        size: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_get_activity(
        h_event: SPXEVENTHANDLE,
        p_activity: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_has_audio(
        h_event: SPXEVENTHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn dialog_service_connector_activity_received_event_get_audio(
        h_event: SPXEVENTHANDLE,
        p_audio: *mut SPXAUDIOSTREAMHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_get_interaction_id_size(
        h_event: SPXEVENTHANDLE,
        size: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_get_interaction_id(
        h_event: SPXEVENTHANDLE,
        p_interaction_id: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_get_conversation_id_size(
        h_event: SPXEVENTHANDLE,
        size: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_get_conversation_id(
        h_event: SPXEVENTHANDLE,
        p_interaction_id: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_turn_status_received_get_status(
        h_event: SPXEVENTHANDLE,
        p_status: *mut ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_recognized_size(
        h_event: SPXEVENTHANDLE,
        size: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn dialog_service_connector_recognized_get_result(
        h_event: SPXEVENTHANDLE,
        size: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_create_from_config(
        phconv: *mut SPXCONVERSATIONHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_update_participant_by_user_id(
        hconv: SPXCONVERSATIONHANDLE,
        add: bool,
        userId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_update_participant_by_user(
        hconv: SPXCONVERSATIONHANDLE,
        add: bool,
        huser: SPXUSERHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_update_participant(
        hconv: SPXCONVERSATIONHANDLE,
        add: bool,
        hparticipant: SPXPARTICIPANTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_get_conversation_id(
        hconv: SPXCONVERSATIONHANDLE,
        id: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_end_conversation(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_get_property_bag(
        hconv: SPXCONVERSATIONHANDLE,
        phpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_release_handle(handle: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_start_conversation(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_delete_conversation(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_lock_conversation(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_unlock_conversation(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_mute_all_participants(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_unmute_all_participants(hconv: SPXCONVERSATIONHANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_mute_participant(
        hconv: SPXCONVERSATIONHANDLE,
        participantId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_unmute_participant(
        hconv: SPXCONVERSATIONHANDLE,
        participantId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_transcription_result_get_speaker_id(
        hresult: SPXRESULTHANDLE,
        pszSpeakerId: *mut ::std::os::raw::c_char,
        cchSpeakerId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_create_from_config(
        phmeeting: *mut SPXMEETINGHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        id: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_update_participant_by_user_id(
        hconv: SPXMEETINGHANDLE,
        add: bool,
        userId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_update_participant_by_user(
        hconv: SPXMEETINGHANDLE,
        add: bool,
        huser: SPXUSERHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_update_participant(
        hconv: SPXMEETINGHANDLE,
        add: bool,
        hparticipant: SPXPARTICIPANTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_get_meeting_id(
        hconv: SPXMEETINGHANDLE,
        id: *mut ::std::os::raw::c_char,
        size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_end_meeting(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_get_property_bag(hconv: SPXMEETINGHANDLE, phpropbag: *mut AZAC_HANDLE)
        -> AZACHR;
}
extern "C" {
    pub fn meeting_release_handle(handle: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_start_meeting(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_delete_meeting(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_lock_meeting(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_unlock_meeting(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_mute_all_participants(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_unmute_all_participants(hconv: SPXMEETINGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn meeting_mute_participant(
        hconv: SPXMEETINGHANDLE,
        participantId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_unmute_participant(
        hconv: SPXMEETINGHANDLE,
        participantId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_transcription_result_get_user_id(
        hresult: SPXRESULTHANDLE,
        pszUserId: *mut ::std::os::raw::c_char,
        cchUserId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn meeting_transcription_result_get_utterance_id(
        hresult: SPXRESULTHANDLE,
        pszUtteranceId: *mut ::std::os::raw::c_char,
        cchUtteranceId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn user_create_from_id(
        user_id: *const ::std::os::raw::c_char,
        huser: *mut SPXUSERHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn user_release_handle(huser: SPXUSERHANDLE) -> AZACHR;
}
extern "C" {
    pub fn user_get_id(
        huser: SPXUSERHANDLE,
        user_id: *mut ::std::os::raw::c_char,
        user_id_size: size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn participant_create_handle(
        hparticipant: *mut SPXPARTICIPANTHANDLE,
        userId: *const ::std::os::raw::c_char,
        preferred_language: *const ::std::os::raw::c_char,
        voice_signature: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn participant_release_handle(hparticipant: SPXPARTICIPANTHANDLE) -> AZACHR;
}
extern "C" {
    pub fn participant_set_preferred_langugage(
        hparticipant: SPXPARTICIPANTHANDLE,
        preferred_language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn participant_set_voice_signature(
        hparticipant: SPXPARTICIPANTHANDLE,
        voice_signature: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn participant_get_property_bag(
        hparticipant: SPXPARTICIPANTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
pub type PCONV_TRANS_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        hEvent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn conversation_translator_create_from_config(
        phandle: *mut SPXCONVERSATIONTRANSLATORHANDLE,
        haudioinput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_get_property_bag(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
        phpropertyBag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_join(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
        hconv: SPXCONVERSATIONHANDLE,
        psznickname: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_join_with_id(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
        pszconversationid: *const ::std::os::raw::c_char,
        psznickname: *const ::std::os::raw::c_char,
        pszlang: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_start_transcribing(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_stop_transcribing(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_send_text_message(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
        pszmessage: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_leave(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_set_authorization_token(
        hconvtranslator: SPXCONVERSATIONTRANSLATORHANDLE,
        pszAuthToken: *const ::std::os::raw::c_char,
        pszRegion: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_handle_is_valid(handle: SPXCONVERSATIONTRANSLATORHANDLE)
        -> bool;
}
extern "C" {
    pub fn conversation_translator_handle_release(handle: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_session_started_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_session_stopped_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_canceled_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participants_changed_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_conversation_expiration_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_transcribing_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_transcribed_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_text_message_recevied_set_callback(
        hConvTrans: SPXCONVERSATIONTRANSLATORHANDLE,
        pCallback: PCONV_TRANS_CALLBACK,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_connection_connected_set_callback(
        hConnection: SPXCONNECTIONHANDLE,
        pCallback: CONNECTION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_connection_disconnected_set_callback(
        hConnection: SPXCONNECTIONHANDLE,
        pCallback: CONNECTION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_event_handle_is_valid(
        handle: SPXCONVERSATIONTRANSLATORHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn conversation_translator_event_handle_release(handle: AZAC_HANDLE) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_event_get_expiration_time(
        hevent: SPXEVENTHANDLE,
        pexpirationminutes: *mut i32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_event_get_participant_changed_reason(
        hevent: SPXEVENTHANDLE,
        preason: *mut ParticipantChangedReason,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_event_get_participant_changed_at_index(
        hevent: SPXEVENTHANDLE,
        index: ::std::os::raw::c_int,
        phparticipant: *mut SPXPARTICIPANTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_result_get_user_id(
        hresult: SPXRESULTHANDLE,
        pszUserId: *mut ::std::os::raw::c_char,
        cchUserId: u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_result_get_original_lang(
        hresult: SPXRESULTHANDLE,
        psz: *mut ::std::os::raw::c_char,
        pcch: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_avatar(
        hevent: SPXEVENTHANDLE,
        psz: *mut ::std::os::raw::c_char,
        pcch: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_displayname(
        hevent: SPXEVENTHANDLE,
        psz: *mut ::std::os::raw::c_char,
        pcch: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_id(
        hevent: SPXEVENTHANDLE,
        psz: *mut ::std::os::raw::c_char,
        pcch: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_is_muted(
        hevent: SPXEVENTHANDLE,
        pMuted: *mut bool,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_is_host(
        hevent: SPXEVENTHANDLE,
        pIsHost: *mut bool,
    ) -> AZACHR;
}
extern "C" {
    pub fn conversation_translator_participant_get_is_using_tts(
        hevent: SPXEVENTHANDLE,
        ptts: *mut bool,
    ) -> AZACHR;
}
extern "C" {
    pub static CODECCREATEEXPORTNAME: [::std::os::raw::c_char; 13usize];
}
pub type codec_c_interface_P = *mut codec_c_interface;
pub type SPXCODECCTYPE = codec_c_interface_P;
#[doc = " The SPX_CODEC_CLIENT_GET_PROPERTY represents the function reading a property value"]
#[doc = " @param id Property id."]
#[doc = " @param buffer caller provided buffer to receive the value of the property"]
#[doc = " @param buffersize buffer size. If buffer is passed as null it will return the required buffer size."]
#[doc = " @param codecContext A pointer to caller data provided through the codec_create call."]
#[doc = " @return A return code or zero if successful."]
pub type SPX_CODEC_CLIENT_GET_PROPERTY = ::std::option::Option<
    unsafe extern "C" fn(
        id: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        buffersize: *mut u64,
        codecContext: *mut ::std::os::raw::c_void,
    ) -> AZACHR,
>;
#[doc = " The AUDIO_ENCODER_ONENCODEDDATA type represents an application-defined"]
#[doc = " status callback function used to provide the encoded data."]
#[doc = " @param pBuffer audio data buffer."]
#[doc = " @param bytesToWrite The length of pBuffer in bytes."]
#[doc = " @param duration_100nanos The duration of the audio sample"]
#[doc = " @param pContext A pointer to the application-defined callback context."]
pub type AUDIO_ENCODER_ONENCODEDDATA = ::std::option::Option<
    unsafe extern "C" fn(
        pBuffer: *const u8,
        bytesToWrite: size_t,
        duration_100nanos: u64,
        pContext: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct codec_c_interface {
    #[doc = " @param codec codec Object returned by the codec_create call to be initialized"]
    #[doc = " @param inputSamplesPerSecond sample rate for the input audio"]
    #[doc = " @param inputBitsPerSample bits per sample for the input audio"]
    #[doc = " @param inputChannels number of channel of the input audio"]
    #[doc = " @param dataCallback An application defined callback."]
    #[doc = " @param pContext A pointer to the application-defined callback context."]
    #[doc = " @return A return code or zero if successful."]
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            codec: SPXCODECCTYPE,
            inputSamplesPerSecond: u32,
            inputBitsPerSample: u8,
            inputChannels: u8,
            datacallback: AUDIO_ENCODER_ONENCODEDDATA,
            pContext: *mut ::std::os::raw::c_void,
        ) -> AZACHR,
    >,
    #[doc = " @param codec codec object returned by the codec_create call."]
    #[doc = " @param buffer caller provided buffer to receive the value of the property"]
    #[doc = " @param buffersize buffer size. If buffer is passed as null it will return the required buffer size."]
    #[doc = " @return A return code or zero if successful."]
    pub get_format_type: ::std::option::Option<
        unsafe extern "C" fn(
            codec: SPXCODECCTYPE,
            buffer: *mut ::std::os::raw::c_char,
            buffersize: *mut u64,
        ) -> AZACHR,
    >,
    #[doc = " Encodes raw PCM data."]
    #[doc = " @param codec codec object returned by the codec_create call."]
    #[doc = " @param pBuffer The PCM data."]
    #[doc = " @param bytesToWrite The length pBuffer."]
    #[doc = " @return A return code or zero if successful."]
    pub encode: ::std::option::Option<
        unsafe extern "C" fn(
            codec: SPXCODECCTYPE,
            pBuffer: *const u8,
            bytesToWrite: size_t,
        ) -> AZACHR,
    >,
    #[doc = " Flushes the encoder."]
    #[doc = " @param codec codec object returned by the codec_create call."]
    #[doc = " @return A return code or zero if successful."]
    pub flush: ::std::option::Option<unsafe extern "C" fn(codec: SPXCODECCTYPE) -> AZACHR>,
    #[doc = " Terminate the encoded stream immediately"]
    #[doc = " @param codec codec object returned by the codec_create call."]
    #[doc = " @return A return code or zero if successful."]
    pub endstream: ::std::option::Option<unsafe extern "C" fn(codec: SPXCODECCTYPE) -> AZACHR>,
    #[doc = " Destroys the encoder. The codec object should not be used anymore after this call."]
    #[doc = " @param codec codec object returned by the codec_create call."]
    #[doc = " @return A return code or zero if successful."]
    pub destroy: ::std::option::Option<unsafe extern "C" fn(codec: SPXCODECCTYPE) -> AZACHR>,
}
#[test]
fn bindgen_test_layout_codec_c_interface() {
    assert_eq!(
        ::std::mem::size_of::<codec_c_interface>(),
        48usize,
        concat!("Size of: ", stringify!(codec_c_interface))
    );
    assert_eq!(
        ::std::mem::align_of::<codec_c_interface>(),
        8usize,
        concat!("Alignment of ", stringify!(codec_c_interface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<codec_c_interface>())).init as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<codec_c_interface>())).get_format_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(get_format_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<codec_c_interface>())).encode as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(encode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<codec_c_interface>())).flush as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<codec_c_interface>())).endstream as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(endstream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<codec_c_interface>())).destroy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(codec_c_interface),
            "::",
            stringify!(destroy)
        )
    );
}
extern "C" {
    #[doc = " Creates a codec object. This method needs to be exported from the dll"]
    #[doc = " @param codecid - codec id, can be null or empty if the library implements only one codec."]
    #[doc = " @param codecContext - context to be used to call back to the caller"]
    #[doc = " @param property_read_func - function to read properties"]
    #[doc = " @return A codec object"]
    pub fn codec_create(
        codecid: *const ::std::os::raw::c_char,
        codecContext: *mut ::std::os::raw::c_void,
        property_read_func: SPX_CODEC_CLIENT_GET_PROPERTY,
    ) -> SPXCODECCTYPE;
}
pub type PCODEC_CREATE_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        codecid: *const ::std::os::raw::c_char,
        codecContext: *mut ::std::os::raw::c_void,
        property_read_func: SPX_CODEC_CLIENT_GET_PROPERTY,
    ) -> SPXCODECCTYPE,
>;
extern "C" {
    pub fn create_voice_profile_client_from_config(
        phclient: *mut SPXVOICEPROFILECLIENTHANDLE,
        hSpeechConfig: SPXSPEECHCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_client_release_handle(hVoiceClient: SPXVOICEPROFILECLIENTHANDLE)
        -> AZACHR;
}
extern "C" {
    pub fn create_voice_profile(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        id: ::std::os::raw::c_int,
        locale: *const ::std::os::raw::c_char,
        pProfileHandle: *mut SPXVOICEPROFILEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn enroll_voice_profile(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        hProfileHandle: SPXVOICEPROFILEHANDLE,
        hAudioInput: SPXAUDIOCONFIGHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_client_get_property_bag(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn create_voice_profile_from_id_and_type(
        phVoiceProfile: *mut SPXVOICEPROFILEHANDLE,
        id: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_get_id(
        hVoiceProfile: SPXVOICEPROFILEHANDLE,
        psz: *mut ::std::os::raw::c_char,
        pcch: *mut u32,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_get_type(
        hVoiceProfile: SPXVOICEPROFILEHANDLE,
        ptype: *mut ::std::os::raw::c_int,
    ) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_release_handle(hVoiceProfile: SPXVOICEPROFILEHANDLE) -> AZACHR;
}
extern "C" {
    pub fn voice_profile_get_property_bag(
        voiceprofilehandle: SPXVOICEPROFILEHANDLE,
        pProperties: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn delete_voice_profile(
        hclient: SPXVOICEPROFILECLIENTHANDLE,
        hProfileHandle: SPXVOICEPROFILEHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn reset_voice_profile(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        hProfileHandle: SPXVOICEPROFILEHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn get_profiles_json(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        type_: ::std::os::raw::c_int,
        ppsz: *mut *mut ::std::os::raw::c_char,
        pcch: *mut size_t,
    ) -> AZACHR;
}
extern "C" {
    pub fn retrieve_enrollment_result(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        pId: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        phVoiceProfile: *mut SPXVOICEPROFILEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn get_activation_phrases(
        hVoiceProfileClient: SPXVOICEPROFILECLIENTHANDLE,
        pLocale: *const ::std::os::raw::c_char,
        type_: ::std::os::raw::c_int,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn recognizer_create_speaker_recognizer_from_config(
        phspeakerid: *mut SPXSPEAKERIDHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_recognizer_release_handle(phspeakerid: SPXSPEAKERIDHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speaker_recognizer_get_property_bag(
        phspeakerid: SPXSPEAKERIDHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_identification_model_create(psimodel: *mut SPXSIMODELHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speaker_identification_model_add_profile(
        hsimodel: SPXSIMODELHANDLE,
        hprofile: SPXVOICEPROFILEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_identification_model_release_handle(hmodel: SPXSIMODELHANDLE) -> AZACHR;
}
extern "C" {
    pub fn speaker_recognizer_identify(
        phspeakerid: SPXSPEAKERIDHANDLE,
        hsimodel: SPXSIMODELHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_recognizer_verify(
        phspeakerid: SPXSPEAKERIDHANDLE,
        hsvmodel: SPXSVMODELHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_verification_model_create(
        psvmodel: *mut SPXSVMODELHANDLE,
        hprofile: SPXVOICEPROFILEHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn speaker_verification_model_release_handle(hsvmodel: SPXSVMODELHANDLE) -> AZACHR;
}
pub const Pronunciation_Assessment_Grading_System_PronunciationAssessmentGradingSystem_FivePoint:
    Pronunciation_Assessment_Grading_System = 1;
pub const Pronunciation_Assessment_Grading_System_PronunciationAssessmentGradingSystem_HundredMark : Pronunciation_Assessment_Grading_System = 2 ;
pub type Pronunciation_Assessment_Grading_System = ::std::os::raw::c_uint;
pub const Pronunciation_Assessment_Granularity_PronunciationAssessmentGranularity_Phoneme:
    Pronunciation_Assessment_Granularity = 1;
pub const Pronunciation_Assessment_Granularity_PronunciationAssessmentGranularity_Word:
    Pronunciation_Assessment_Granularity = 2;
pub const Pronunciation_Assessment_Granularity_PronunciationAssessmentGranularity_FullText:
    Pronunciation_Assessment_Granularity = 3;
pub type Pronunciation_Assessment_Granularity = ::std::os::raw::c_uint;
extern "C" {
    pub fn create_pronunciation_assessment_config(
        hPronunciationAssessmentConfig: *mut SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
        referenceText: *const ::std::os::raw::c_char,
        gradingSystem: Pronunciation_Assessment_Grading_System,
        granularity: Pronunciation_Assessment_Granularity,
        enableMiscue: bool,
    ) -> AZACHR;
}
extern "C" {
    pub fn create_pronunciation_assessment_config_from_json(
        hPronunciationAssessmentConfig: *mut SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
        json: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn pronunciation_assessment_config_is_handle_valid(
        hPronunciationAssessmentConfig: SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn pronunciation_assessment_config_release(
        hPronunciationAssessmentConfig: SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn pronunciation_assessment_config_get_property_bag(
        hPronunciationAssessmentConfig: SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn pronunciation_assessment_config_to_json(
        hPronunciationAssessmentConfig: SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn pronunciation_assessment_config_apply_to_recognizer(
        hPronunciationAssessmentConfig: SPXPRONUNCIATIONASSESSMENTCONFIGHANDLE,
        hreco: SPXRECOHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn source_lang_config_from_language(
        hconfig: *mut SPXSOURCELANGCONFIGHANDLE,
        language: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn source_lang_config_from_language_and_endpointId(
        hconfig: *mut SPXSOURCELANGCONFIGHANDLE,
        language: *const ::std::os::raw::c_char,
        endpointId: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn source_lang_config_is_handle_valid(hconfig: SPXSOURCELANGCONFIGHANDLE) -> bool;
}
extern "C" {
    pub fn source_lang_config_release(hconfig: SPXSOURCELANGCONFIGHANDLE) -> AZACHR;
}
extern "C" {
    pub fn source_lang_config_get_property_bag(
        hconfig: SPXSOURCELANGCONFIGHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn create_auto_detect_source_lang_config_from_open_range(
        hAutoDetectSourceLanguageconfig: *mut SPXAUTODETECTSOURCELANGCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn create_auto_detect_source_lang_config_from_languages(
        hAutoDetectSourceLanguageconfig: *mut SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        languages: *const ::std::os::raw::c_char,
    ) -> AZACHR;
}
extern "C" {
    pub fn create_auto_detect_source_lang_config_from_source_lang_config(
        hAutoDetectSourceLanguageconfig: *mut SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        hSourceLanguageConfig: SPXSOURCELANGCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn add_source_lang_config_to_auto_detect_source_lang_config(
        hAutoDetectSourceLanguageconfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        hSourceLanguageConfig: SPXSOURCELANGCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn auto_detect_source_lang_config_is_handle_valid(
        hAutoDetectSourceLanguageconfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn auto_detect_source_lang_config_release(
        hAutoDetectSourceLanguageconfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
    ) -> AZACHR;
}
extern "C" {
    pub fn auto_detect_source_lang_config_get_property_bag(
        hAutoDetectSourceLanguageconfig: SPXAUTODETECTSOURCELANGCONFIGHANDLE,
        hpropbag: *mut AZAC_HANDLE,
    ) -> AZACHR;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
